name: CI/CD
on:
  push:
    branches:
    - master
  pull_request:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "Yes" to confirm deploy'     
        required: true
        default: 'No'


jobs:
  terraform-plan:
    name: "Terraform plan"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Print Plan outcome
        uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: "Terraform apply"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.confirm == 'Yes') ||
      github.event_name == 'push'
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

  test:
    name: Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Lint
        run: yarn lint
      - name: Run test
        run: yarn test

  deploy-website:
    needs: terraform-apply
    name: "Deploy Website"
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' && github.event.inputs.confirm == 'Yes') ||
      github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Install dependencies
        run: yarn
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Read SSM Parameters
        id: ssm_read
        run: |
          website_s3_bucket=$(aws ssm get-parameter --name /tuune/prod/website_s3_bucket --query Parameter.Value --output text)
          echo "::set-output name=website_s3_bucket::$website_s3_bucket"
          website_s3_bucket=$(aws ssm get-parameter --name /tuune/prod/cloudfront_id --query Parameter.Value --output text)
          echo "::set-output name=cloudfront_id::$cloudfront_id"
      - name: Run build
        run: yarn build
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ steps.ssm_read.outputs.website_s3_bucket }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: build
      - name: Invalidate cloudfront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.ssm_read.outputs.cloudfront_id }} \
          --paths "/index.html"